library(XML)
url <- "http://www.alexa.com/siteinfo/thinkor.org"#
doc <- htmlTreeParse(url, useInternalNodes=T)#
nset <- getNodeSet(doc, "//div/table[@id='siteStats']")
nset
?htmlTreeParse
sapply(getNodeSet(doc, "//variable"), xmlValue)
lapply(nset, readHTMLTable)
mls.url <- "http://www.majorleaguesoccer.com/stats/2008/reg"#
doc <- htmlTreeParse(mls.url, useInternalNodes=T)#
nset <- getNodeSet(doc, #
  "//div/table[@class='stats sortable-first team-totals']")
nset
tables <- lapply(nset, readHTMLTable)
tables
tables[[1]][1,5]
tables[[1]][,5]
nset
?lapply
length(nset)
nset[[1]]
nset[[1]][1]
length()nset[[1]])
length(nset[[1]])
?readHTMLTable
tables <- lapply(nset, readHTMLTable, header = FALSE)
tables
nset.2 <- getNodeSet(doc, #
  "//div/table[@class='sortable-first stats attendance']")
tables.attendance <- lapply(nset.attendance, readHTMLTable, header = FALSE)
nset.attendance <- getNodeSet(doc, #
  "//div/table[@class='sortable-first stats attendance']")#
tables.attendance <- lapply(nset.attendance, readHTMLTable, header = FALSE)
tables.attendance
nset.stats <- getNodeSet(doc, #
  "//div/table[@class='stats sortable-first team-totals']")#
tables.stats <- lapply(nset.stats, readHTMLTable, header = FALSE)
nset.attendance <- getNodeSet(doc, #
  "//div/table[@class='sortable-first stats attendance']")#
tables.attendance <- lapply(nset.attendance, readHTMLTable, header = FALSE)
tables.stat
tables.stats
class(table.stats[[1]])
nset.stats <- getNodeSet(doc, #
  "//div/table[@class='stats sortable-first team-totals']")#
table.stats <- lapply(nset.stats, readHTMLTable, header = FALSE)#
#
nset.attendance <- getNodeSet(doc, #
  "//div/table[@class='sortable-first stats attendance']")#
table.attendance <- lapply(nset.attendance, readHTMLTable, header = FALSE)
class(table.stats[[1]])
order(table.stats[[1]], V!)
order(table.stats[[1]], V1)
table.stats[[1]](order, V1)
table.stats[[1]][order(V1),]
table.stats[[1]]
table.stats[[1]][order(V1), ]
table.stats[[1]]$V1
sort(table.stats[[1]]$V1)
df <- table.stats[[1]]
df
df$V1
df[order(V1),]
df[order(V2),]
tmp <- df[order(V2),]
tmp <- df[order(df$V2),]
tmp
table.stats[order(table.stats$V1), ]#
attendance.stats[order(attendance.stats$V1), ]
table.stats[order(table.stats$V1), ]#
table.attendance[order(attendance.stats$V1), ]
table.attendance[order(table.attendance$V1), ]
df.stats <- table.stats[[1]]#
df.attendance <- attendance[[1]]#
#
df.stats[order(df.stats$V1), ]#
df.attendance[order(df.attendance$V1), ]
df.attendance <- table.attendance[[1]]#
#
df.stats[order(df.stats$V1), ]#
df.attendance[order(df.attendance$V1), ]
table.attendance
df.total <- merge(df.stats, df.attendance, by = "V1", all = TRUE)
df.total
write.table(df.total, file = "junk.csv", sep = ",")
?write.table
wd.path <- "~/Side_Projects/Sports/Scrape/src/"
r.scrape <- system.time(source(paste(wd.path, "src/scrape.R", sep = "")))#
py.scrape <- system.time(#
               system("python ~/Side_Projects/Sports/Scraping/src/scraper.py"))
wd.path <- "~/Side_Projects/Sports/Scraping/"#
#
## Dependencies:#
source(paste(wd.path, "src/load.R", sep = ""))#
#
  #
r.scrape <- system.time(source(paste(wd.path, "src/scrape.R", sep = "")))#
py.scrape <- system.time(#
               system("python ~/Side_Projects/Sports/Scraping/src/scraper.py"))
type <- c(rep("python", 5), rep("R", 5))#
timing <- rep(names(py.scrape), 2)#
values <- as.numeric(round(c(py.scrape, r.scrape), 4))#
#
df.scrape <- data.frame(cbind(type, timing, values))
p <- ggplot(data = df.scrape, aes(x = timing, y = values, #
                                  group = type, colour = type))
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
ggplot(data = df.scrape, aes(x = timing, y = values, fill = color)) +#
  geom_bar(position = "dodge") + #
  scale_colour_identity(labels=levels(df.scrape$type), grob="bar", name="color")
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_y_continuous() +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
p <- ggplot(data = df.scrape, aes(x = timing, y = as.numeric(values), #
                                  group = type, colour = type)) #
#
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_y_continuous() +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
round(c(py.scrape, r.scrape),2)
class(py.scrape)
as.numeric(round(c(py.scrape, r.scrape), 4))
class(as.numeric(round(c(py.scrape, r.scrape), 4)))
df.scrape
class(df.scrape$type)
class(df.scrape$timing)
class(df.scrape$values)
type <- c(rep("python", 5), rep("R", 5))#
timing <- rep(names(py.scrape), 2)#
values <- as.numeric(round(c(py.scrape, r.scrape), 4))#
#
df.scrape <- data.frame(cbind(type, timing, values))
class(df.scrape$values)
df.scrape$test <- rnorm(10)
class(df.scrape$test)
df.test
df.scrape
?as.numeric
?round
is.numeric(round(c(py.scrape, r.scrape), 4))
df.scrape <- data.frame(cbind(type, timing))
df.scrape
df.scrape$values <- as.numeric(round(c(py.scrape, r.scrape), 4))
df.scrape
p <- ggplot(data = df.scrape, aes(x = timing, y = as.numeric(values), #
                                  group = type, colour = type)) #
#
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_y_continuous("time (in sec)") +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_y_continuous("time (in sec)", limits = c(0, 3)) +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
df.scrape <- data.frame(type = type, timing = timing, values = values)
df.scrape
df.scrape <- data.frame(type = type, timing = timing, values = values)#
#
p <- ggplot(data = df.scrape, aes(x = timing, y = as.numeric(values), #
                                  group = type, colour = type)) #
#
p + geom_line(lty = 3) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_y_continuous("time (in sec)", limits = c(0, 3)) +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
p + geom_line(lty = 2) + #
  geom_point(colour="grey60", size = 4) +#
  geom_point(aes(colour = type)) +#
  scale_x_discrete("timed category") +#
  scale_y_continuous("time (in sec)", limits = c(0, 3)) +#
  scale_colour_manual("language", values = c("forestgreen", "darkred"))
ggsave(file = paste(wd.path, "fig/time.png", sep = ""), hei = 7, wid = 7)
r.scrape
py.scrape
(2.204-.393)/.393
.393*4.608142
2.204/.393
?XML
??XML
